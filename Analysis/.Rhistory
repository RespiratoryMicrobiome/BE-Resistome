geom_jitter(width = 0.1) + # You can change the type of plot based on your preference
#facet_wrap(~ Copies, scales = "free_y", labeller = labeller(RT_group = c("1" = "RT1", "2" = "RT2")))+
labs(x = "", y = "log10 (P. aeruginosa 16S copies)") +
scale_x_discrete(labels = c("Pre", "Post"))+
scale_y_continuous(breaks = c(0, 1, 2, 3, 4,5,6))+
#scale_y_log10() +  # Add this line to set the y-axis to log scale
theme(
strip.background = element_rect(
color="white", fill="white", size=1, linetype="solid"),
strip.text.x = element_blank(),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.5, colour = "black"))
qPCR_plot
qPCR_plot <-ggplot(long_qPCR_2[which(long_qPCR_2$Copies == "PA_qPCR"),], aes(x = Time.point, y = Value_log)) +
geom_boxplot(outlier.shape = NA, fill = "#7FC97F")+
geom_line(aes(group = Patient))+
geom_point() + # You can change the type of plot based on your preference
#facet_wrap(~ Copies, scales = "free_y", labeller = labeller(RT_group = c("1" = "RT1", "2" = "RT2")))+
labs(x = "", y = "log10 (P. aeruginosa 16S copies)") +
scale_x_discrete(labels = c("Pre", "Post"))+
scale_y_continuous(breaks = c(0, 1, 2, 3, 4,5,6))+
#scale_y_log10() +  # Add this line to set the y-axis to log scale
theme(
strip.background = element_rect(
color="white", fill="white", size=1, linetype="solid"),
strip.text.x = element_blank(),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.5, colour = "black"))
qPCR_plot
wilcox.test(long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Value~long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Time.point)
wilcox.test(data$before, data$after, paired = TRUE, alternative = "two.sided")
wilcox.test(long_qPCR_2[which(long_qPCR_2$Copies== "X16S_copies"),]$Value~long_qPCR_2[which(long_qPCR_2$Copies== "X16S_copies"),]$Time.point)
qPCR_plot <-ggplot(long_qPCR_2[which(long_qPCR_2$Copies == "PA_qPCR"),], aes(x = Time.point, y = Value_log)) +
geom_boxplot(outlier.shape = NA, fill = "#7FC97F")+
geom_line(aes(group = Patient))+
geom_point() + # You can change the type of plot based on your preference
#facet_wrap(~ Copies, scales = "free_y", labeller = labeller(RT_group = c("1" = "RT1", "2" = "RT2")))+
labs(x = "", y = expression(paste("log10 (16S rRNA gene copies /", mu, "l)"))) +  scale_x_discrete(labels = c("Pre", "Post"))+
scale_y_continuous(breaks = c(0, 1, 2, 3, 4,5,6))+
#scale_y_log10() +  # Add this line to set the y-axis to log scale
theme(
strip.background = element_rect(
color="white", fill="white", size=1, linetype="solid"),
strip.text.x = element_blank(),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.5, colour = "black"))
qPCR_plot
qPCR_plot <-ggplot(long_qPCR_2[which(long_qPCR_2$Copies == "PA_qPCR"),], aes(x = Time.point, y = Value_log)) +
geom_boxplot(outlier.shape = NA, fill = "#7FC97F")+
geom_line(aes(group = Patient))+
geom_point() + # You can change the type of plot based on your preference
#facet_wrap(~ Copies, scales = "free_y", labeller = labeller(RT_group = c("1" = "RT1", "2" = "RT2")))+
labs(x = "", y = expression(paste("log10 (16S P.aeruginosa rRNA gene copies /", mu, "l)"))) +  scale_x_discrete(labels = c("Pre", "Post"))+
scale_y_continuous(breaks = c(0, 1, 2, 3, 4,5,6))+
#scale_y_log10() +  # Add this line to set the y-axis to log scale
theme(
strip.background = element_rect(
color="white", fill="white", size=1, linetype="solid"),
strip.text.x = element_blank(),
panel.background = element_rect(fill = NA),
axis.line = element_line(size = 0.5, colour = "black"))
qPCR_plot
wilcox.test(long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Value~long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Time.point)
long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]
wilcox.test(long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Value~long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Time.point)
wilcox.test(long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Value~long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Time.point, paired = TRUE, alternative = "two.sided"))
wilcox.test(long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Value~long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Time.point, paired = TRUE, alternative = "two.sided")
wilcox.result<-
wilcox.test(long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Value~long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Time.point, paired = TRUE, alternative = "two.sided")
qPCR_plot +
geom_signif(
comparisons = list(c("Pre", "Post")),
map_signif_level = TRUE,
test = wilcox_result,
textsize = 4,
step_increase = 0.05
)
qPCR_plot +
geom_signif(
comparisons = list(c("Pre", "Post")),
map_signif_level = TRUE,
test = wilcox_result,
textsize = 4,
step_increase = 0.05
)
wilcox.result
wilcox_result<-
wilcox.test(long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Value~long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Time.point, paired = TRUE, alternative = "two.sided")
qPCR_plot +
geom_signif(
comparisons = list(c("Pre", "Post")),
map_signif_level = TRUE,
test = wilcox_result,
textsize = 4,
step_increase = 0.05
)
qPCR_plot +
geom_signif(
comparisons = list(c("Pre", "Post")),
test = wilcox_result,
map_signif_level = TRUE,
textsize = 4,
step.increase = 0.05
)
# Create a data frame for annotation with significance stars
annotation_df <- data.frame(
x = c(1.5),  # Adjust the x-coordinate as needed
y = c(6),    # Adjust the y-coordinate as needed
label = ifelse(wilcox_result$p.value < 0.05, "*", ""),  # Display a star for p < 0.05
p.value = wilcox_result$p.value
)
# Add the significance stars to the plot using geom_text_repel
qPCR_plot +
geom_text_repel(
data = annotation_df,
aes(x = x, y = y, label = label),
size = 4,
show.legend = FALSE
)
wilcox_result<-
wilcox.test(long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Value~long_qPCR_2[which(long_qPCR_2$Copies== "PA_qPCR"),]$Time.point, paired = TRUE, alternative = "two.sided")
# Create a data frame for annotation with significance stars
annotation_df <- data.frame(
x = c(1.5),  # Adjust the x-coordinate as needed
y = c(6),    # Adjust the y-coordinate as needed
label = ifelse(wilcox_result$p.value < 0.05, "*", ""),  # Display a star for p < 0.05
p.value = wilcox_result$p.value
)
# Add the significance stars to the plot using geom_text_repel
qPCR_plot +
geom_text_repel(
data = annotation_df,
aes(x = x, y = y, label = label),
size = 4,
show.legend = FALSE
)
library(ggrepel)
# Add the significance stars to the plot using geom_text_repel
qPCR_plot +
geom_text_repel(
data = annotation_df,
aes(x = x, y = y, label = label),
size = 4,
show.legend = FALSE
)
setwd("C:/Users/mmaca/Code/git/BE-Resistome/Analysis/")
#Load packages
if(!require("pacman")) install.packages("pacman")
pacman::p_load(pacman, ggplot2, tidyverse, tidyr, lubridate, data.table, tsibble, wesanderson, reticulate, SNFtool, funrar, vegan, dunn.test, ggpubr, Hmisc, RColorBrewer, phyloseq, dplyr, reshape2, forcats, colorspace, pheatmap, fpc)
#reticulate env set up for python. #tailor to local set up (Conda etc.)
reticulate::use_python("C:/Users/mmaca/OneDrive/Documents/.virtualenvs/r-reticulate/Scripts/python.exe", required = TRUE)
source("../Data/R_input_files/function_snf.R")
source_python("../Data/R_input_files/sil.py")
#DATA####
##Master data####
Master <-read.csv("../Data/R_input_files/Clinical_AMR_Microbiome.csv") %>%
as_tibble()
Master$FEVfactor<-cut(Master$FEV1, breaks=c(0, 30, 50, 70, Inf))
##Longitudinal AMR data ####
MasterLT <-read.csv("../Data/R_input_files/LT_master_combined_8.0.csv")
###wrangle AMR data ####
AMRFam <- Master %>% #clinical variables + amr families
as_tibble() %>%
select(-29:-42,-64:-356)
AMRFam$FEVfactor<-cut(AMRFam$FEV1,  breaks=c(0, 30, 50, 70, Inf))
#set levels
AMRFam$ExacerbatorState <- factor(AMRFam$ExacerbatorState, levels=c("NonEx", "Exacerbator", "FreqEx"))
AMRFam$Country <- factor(AMRFam$Country, levels=c("SG", "KL", "DD", "MI"))
AMRFam$Aetiology_short <- factor(AMRFam$Aetiology_short, levels=c("idiopathic", "postInfect", "postTB", "other"))
AMRFam$SampleID <- factor(AMRFam$SampleID, levels = AMRFam$SampleID[order(AMRFam$SC_AMR_alt)])
AMRFam$FEVfactor<-fct_rev(AMRFam$FEVfactor)
AMRFam <- AMRFam %>%
gather(Resistome, RPKM, Acridine.dye,Aminocoumarin.antibiotic,Aminoglycoside,Antibacterial.free.fatty.acids,Beta.lactam,Bicyclomycin,Diaminopyrimidine,Fluoroquinolone,Fosfomycin,Fusidic.acid,MLS,Multidrug,Mupirocin,Nitroimidazole.antibiotic,Nucleoside.antibiotic,Peptide.antibiotic,Phenicol,Rifampicin,Sulfonamide.antibiotic,Tetracycline,Triclosan, -SampleID, -Country,  -Continent, -Matching, -Paired, -Trio, -Age,-Sex..Male.0..Female.1.,-Exacerbations,-ExacerbatorState,  -FEV1,   -BSI, -ICS.use,   -BMI, -Aetiology, -Aetiology_short,-MMRC.score,-SC_AMR_alt, -FEVfactor)
AMRFam$CTRL<-ifelse(is.na(AMRFam$Age), "CTRL", "PATIENT")
###wrangle Bphage data [family]####
BphageFam <- Master %>%
as_tibble() %>%
select(-43:-355)
#filter(ExacerbatorState != "NA") #%>%
#filter(Continent == "Asia") %>%
#filter(Matching == "Matched" )
#generate a % value to rank by myoviridae / Phycodnaviridae
IridoviridaePC<-(BphageFam$Iridoviridae/(rowSums(BphageFam[, c(28:41)]))*100)
BphageFam$Country <- factor(BphageFam$Country, levels=c("SG", "KL", "DD", "MI"))
BphageFam$SampleID <- factor(BphageFam$SampleID, levels = rev(BphageFam$SampleID[order(IridoviridaePC)]))
#gather on data
BphageFam <- BphageFam %>%
gather(Virome, RPKM, Siphoviridae, Unassigned, Iridoviridae, Myoviridae, Phycodnaviridae, Polydnaviridae, Picornaviridae, Podoviridae, Poxviridae, Nyamiviridae, Mimiviridae, Herpesviridae, Inoviridae, Alloherpesviridae, -SampleID, -Country,  -Continent, -Matching, -Paired, -Trio, -Age,-Sex..Male.0..Female.1.,-Exacerbations,-ExacerbatorState,  -FEV1,   -BSI, -ICS.use,   -BMI, -Aetiology, -Aetiology_short,-MMRC.score,-SC_AMR_alt, -FEVfactor)
#post gather level setting (required??)
BphageFam$Virome <- factor(BphageFam$Virome, levels = c("Iridoviridae", "Siphoviridae","Myoviridae", "Phycodnaviridae","Polydnaviridae","Picornaviridae", "Poxviridae","Podoviridae","Nyamiviridae","Mimiviridae","Herpesviridae","Inoviridae","Alloherpesviridae", "Unassigned"))
#Spectral clustering ####
ab_data=make_relative(as.matrix(read.csv("../Data/R_input_files/AMR_R1.csv", row.names = 1)))*100 #need to load processed AMR gene data
ab_data[is.nan(ab_data)] <- 0
ab_data<-as.data.frame(ab_data)
#filter based on prevalence
z=colSums(ab_data>0.1) #filter to reduced number of taxa
sel_col=row.names(as.data.frame(z[z>=(0.01*(nrow(ab_data)))])) #In 1% patients prevalent
ab_data<-ab_data[sel_col]
remove(sel_col,z)
ab_data<-ab_data[rowSums(ab_data[, -1])>0, ] #drop no_res samples
ab_data<-ab_data[row.names(ab_data) != "TBS672", , drop = FALSE] #detection of a single PatA gene in TBS672 creates a clustering artifact due to this 'outlier',
ab_data<-ab_data[row.names(ab_data) != "14GREEK", , drop = FALSE] #likewise 14GREEK only contains smeD.
#create vegdist similarity matrix
ab_dsim=vegdist(ab_data,method='bray',diag=TRUE,upper=TRUE)
ab_dsim[is.nan(ab_dsim)]<-0
AB=(as.matrix(ab_dsim)-1)*-1
#tune for K
sil_values=c()
for (i in 2:20){
labels = spectralClustering(AB, i)
sil_values = c(sil_values, silhouette_score(AB, labels))
}
tuned_k<-which.max(sil_values)
#assess clusters and grouping
paste(tuned_k,sil_values[tuned_k],sep = " ")
labels=spectralClustering(AB,tuned_k)
table(labels)
#assigned labels
lab=as.data.frame(labels,row.names = row.names(ab_data))
lab
lab=as.data.frame(labels,row.names = row.names(AB))
#Calculate the robustness of clustering
#Bootstrap-robustness test
cluster<-function(W,indices,z=tuned_k){
W<-W[indices,indices]
labels=spectralClustering(W,z)
lab=as.data.frame(labels,row.names = row.names(W))
return(lab)
}
is.even <- function(x) x %% 2 == 0
is.odd <- function(x) x %% 2 != 0
misclassification_ratio=c()
for (i in 1:100){
ind<-sample(row.names(AB),round(0.7*(dim(AB)[1])))
l=cluster(AB,ind)
com=merge(lab,l,by="row.names",all.y = TRUE);row.names(com)<-com$Row.names;com$Row.names<-NULL
if ( sum(is.odd(rowSums(com)))>sum(is.even(rowSums(com))) ) {
mis<-sum(is.even(rowSums(com)))
}
else{
mis<-sum(is.odd(rowSums(com)))
}
misclassification_ratio=c(misclassification_ratio,mis/(dim(com)[1]))
}
print("Robustness")
print(1-mean(misclassification_ratio))
mean(misclassification_ratio)
knitr::opts_chunk$set(echo = TRUE)
#INVESTIGATE COLINEARITY
#Create a contingency table for
mytable <- table(AMRDiversityViz_Geo$Aetiology_short, AMRDiversityViz_Geo$Country)
##AMR PCOA of Resistotypes BY Aetiology####
gg <- data.frame(cluster=factor(AMRDiversityViz_Geo$Aetiology_short), x=AMRDiversityViz_Geo$Dim1, y=AMRDiversityViz_Geo$Dim2, grp=AMRDiversityViz_Geo$Aetiology_short)
# Load required R packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, tidyverse, vegan, vcd, knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("../Data/R_input_files/Figure3A_TJ_schematic.pdf")
knitr::include_graphics("../Data/R_input_files/Figure3A_TJ_schematic.pdf")
##Master data cross-sectional####
Master <-read.csv("../Data/R_input_files//Clinical_AMR_Microbiome_R2.csv") %>%
as_tibble()
Master$FEVfactor<-cut(Master$FEV1, breaks=c(0, 30, 50, 70, Inf))
###wrangle AMR data ####
AMRFam <- Master %>% #clinical variables + amr families
as_tibble() %>%
select(-29:-42,-64:-356)
AMRFam$FEVfactor<-cut(AMRFam$FEV1,  breaks=c(0, 30, 50, 70, Inf))
#set levels
AMRFam$ExacerbatorState <- factor(AMRFam$ExacerbatorState, levels=c("NonEx", "Exacerbator", "FreqEx"))
AMRFam$Country <- factor(AMRFam$Country, levels=c("SG", "KL", "DD", "MI"))
AMRFam$Aetiology_short <- factor(AMRFam$Aetiology_short, levels=c("idiopathic", "postInfect", "postTB", "other"))
AMRFam$SampleID <- factor(AMRFam$SampleID, levels = AMRFam$SampleID[order(AMRFam$SC_AMR_alt)])
AMRFam$FEVfactor<-fct_rev(AMRFam$FEVfactor)
AMRFam <- AMRFam %>%
gather(Resistome, RPKM, starts_with(c("Acridine.dye", "Aminocoumarin.antibiotic", "Aminoglycoside", "Antibacterial.free.fatty.acids", "Beta.lactam", "Bicyclomycin", "Diaminopyrimidine", "Fluoroquinolone", "Fosfomycin", "Fusidic.acid", "MLS", "Multidrug", "Mupirocin", "Nitroimidazole.antibiotic", "Nucleoside.antibiotic", "Peptide.antibiotic", "Phenicol", "Rifampicin", "Sulfonamide.antibiotic", "Tetracycline", "Triclosan")), -SampleID, -Country, -Continent, -Matching, -Paired, -Trio, -Age, -Sex..Male.0..Female.1., -Exacerbations, -ExacerbatorState, -FEV1, -BSI, -ICS.use, -BMI, -Ethnicity, -Aetiology_short, -MMRC.score, -SC_AMR_alt, -FEVfactor)
AMRFam$CTRL<-ifelse(is.na(AMRFam$BSI), "CTRL", "PATIENT")
AMR_diversity <- Master %>%
as_tibble() %>%
select(1:1,64:314) #for genes
#select(1:1,43:63) #for amr drug class
NAMES_list <- AMR_diversity$SampleID
main_data <- AMR_diversity[AMR_diversity$SampleID %in% NAMES_list, ]
AMR_diversity<-as.matrix(AMR_diversity)
rownames(AMR_diversity) <- AMR_diversity[,1]
AMR_diversity = as.data.frame(subset(AMR_diversity, select = -c(SampleID) ))
AMR_diversity[] <- lapply(AMR_diversity, as.numeric)
AMR_diversity<-AMR_diversity[row.names(AMR_diversity) != "TBS672", , drop = FALSE]
isZero <- base::rowSums(AMR_diversity) == 0
AMR_diversity<-AMR_diversity[!isZero,]
MasterVIZ = Master
MasterVIZ$select <- ifelse(MasterVIZ$SC_AMR_alt==0, "null", "Bronchiectasis")
MasterVIZ$select <- ifelse(is.na(MasterVIZ$select), "Non-diseased", MasterVIZ$select)
MasterVIZ$SC_AMR_alt <- ifelse(is.na(MasterVIZ$SC_AMR_alt), "Non-diseased", MasterVIZ$SC_AMR_alt)
AMRDiversityViz<-subset(MasterVIZ, select != "null")
AMRDiversityViz<-AMRDiversityViz[AMRDiversityViz$SampleID != "TBS153", , drop = FALSE] #remove for gene level analysis
AMRDiversityViz_Geo<-subset(AMRDiversityViz, is.na(AMRDiversityViz$SC_AMR_alt) == FALSE & AMRDiversityViz$Matching == "Matched" )
AMR_diversity <- AMR_diversity[ row.names(AMR_diversity) %in% AMRDiversityViz_Geo$SampleID, ]
vegdist(AMR_diversity, "bray")-> Mbiome_PCoA
as.matrix(Mbiome_PCoA)->Mbiome_PCoA
BrayCurtMbiome=cmdscale(Mbiome_PCoA)
#ordiplot (BrayCurtMbiome, display = 'species', type = 'text')
BCords<-scores(BrayCurtMbiome)
BCords<-(as.data.frame(t(BCords)))
BCords<-as.data.frame(t(BCords))
AMRDiversityViz_Geo$Dim1<-BCords$Dim1
AMRDiversityViz_Geo$Dim2<-BCords$Dim2
AMRDiversityViz_Geo$Country <- factor(AMRDiversityViz_Geo$Country, levels = c("SG", "KL", "DD", "MI"))
AMRDiversityViz_Geo$Aetiology_short<- factor(AMRDiversityViz_Geo$Aetiology_short, levels=c("idiopathic", "postInfect", "postTB", "other"))
##AMR PCOA of Resistotypes BY Country####
gg <- data.frame(cluster=factor(AMRDiversityViz_Geo$Country), x=AMRDiversityViz_Geo$Dim1, y=AMRDiversityViz_Geo$Dim2, grp=AMRDiversityViz_Geo$Country)
# calculate group centroid locations
centroids <- aggregate(cbind(x,y)~cluster,data=gg,mean)
# merge centroid locations into ggplot dataframe
gg <- merge(gg,centroids,by="cluster",suffixes=c("",".centroid"))
# generate star plot...
PCA_Geo<-ggplot(gg) +
#scale_col_manual(values=c(16, 16, 16,16))+
scale_linetype_identity() +
geom_segment(aes(x=x.centroid, y=y.centroid, xend=x, yend=y, colour = cluster),alpha = 0.3)+
geom_point(aes(x=x,y=y, colour = cluster), size = 2, alpha = 0.5) + #can add ",shape = shape" in aes to introduce shape to points.
#geom_point(aes(x=x,y=y, colour = cluster, shape = shape), size = 2) +
geom_point(data=centroids, aes(x=x, y=y, color=cluster), size=5) +
geom_point(data=centroids, aes(x=x, y=y, color=cluster), size=5, shape = 13, colour = "black") +
scale_colour_manual(labels = c("Singapore", "Kuala Lumpur", "Dundee", "Milan"), values = c("#CD2C1E","#F7CD46","#2A64B7","#91C55A" ))+
labs(colour="",
x = "PC 1 (23.8%)", y = "PC 2 (4.5%)")+
theme(legend.position=c(0.8,0.3),
legend.title = element_blank(),
axis.line = element_line(size = 0.5, colour = "black"),
panel.background = element_rect(fill = NA),
)+
scale_y_reverse()+
xlab("")+
ylab("")
PCA_Geo
#PERMANOVA geography
adonis2(AMR_diversity ~ Country, data=AMRDiversityViz_Geo, method="bray", permutations=999)
#PERMANOVA ethnicity
adonis2(AMR_diversity ~ Ethnicity, data=AMRDiversityViz_Geo, method="bray", permutations=999)
#PERMANOVA geography + ethnicity
adonis2(AMR_diversity ~ Country+Ethnicity, data=AMRDiversityViz_Geo, method="bray", permutations=999)
#PERMANOVA geography + ethnicity in Asian only
#Subset AMRDiversityViz_Geo based on 'Country'
AMRDiversityViz_Geo_subset <- subset(AMRDiversityViz_Geo, Country == "SG" | Country == "KL")
#Match SampleIDs between AMR_diversity and AMRDiversityViz_Geo_subset
matched_samples <- rownames(AMR_diversity) %in% AMRDiversityViz_Geo_subset$SampleID
#Use which() to get the indices of matched samples
matched_indices <- which(matched_samples)
#Subset AMR_diversity based on the matched_indices
AMR_diversity_subset <- AMR_diversity[matched_indices, ]
#run PERMANOVA geography + ethnicity
adonis2(AMR_diversity_subset ~ Ethnicity, data = AMRDiversityViz_Geo_subset, method = "bray", permutations = 999)
##AMR PCOA of Resistotypes BY Aetiology####
gg <- data.frame(cluster=factor(AMRDiversityViz_Geo$Aetiology_short), x=AMRDiversityViz_Geo$Dim1, y=AMRDiversityViz_Geo$Dim2, grp=AMRDiversityViz_Geo$Aetiology_short)
# calculate group centroid locations
centroids <- aggregate(cbind(x,y)~cluster,data=gg,mean)
# merge centroid locations into ggplot dataframe
gg <- merge(gg,centroids,by="cluster",suffixes=c("",".centroid"))
# generate star plot...
PCA_Aet<-ggplot(gg) +
#scale_col_manual(values=c(16, 16, 16,16))+
scale_linetype_identity() +
geom_segment(aes(x=x.centroid, y=y.centroid, xend=x, yend=y, colour = cluster),alpha = 0.3)+
geom_point(aes(x=x,y=y, colour = cluster), size = 2, alpha = 0.5) + #can add ",shape = shape" in aes to introduce shape to points.
#geom_point(aes(x=x,y=y, colour = cluster, shape = shape), size = 2) +
geom_point(data=centroids, aes(x=x, y=y, color=cluster), size=5) +
geom_point(data=centroids, aes(x=x, y=y, color=cluster), size=5, shape = 13, colour = "black") +
scale_colour_manual(labels = c("IP", "PI", "PTB", "Other"), values = c("#8300c4","#F26B38","#2F9599","grey" ))+
labs(colour="",
x = "PC 1 (23.8%)", y = "PC 2 (4.5%)")+
theme(legend.position=c(0.7,0.3),
legend.title = element_blank(),
axis.line = element_line(size = 0.5, colour = "black"),
panel.background = element_rect(fill = NA),
)+
scale_y_reverse()+
xlab("")+
ylab("")
PCA_Aet
#PERMANOVA Aetiology
adonis2(AMR_diversity ~ Aetiology_short, data=AMRDiversityViz_Geo, method="bray", permutations=999)
AMRDiversityViz_Geo <- AMRDiversityViz_Geo %>% filter(!is.na(BMI))
AMRDiversityViz_Geo <- AMRDiversityViz_Geo %>% filter(!is.na(Number.of.lobes.affected))
AMRDiversityViz_Geo <- AMRDiversityViz_Geo %>% filter(!is.na(PriorHospitalisations))
AMRDiversityViz_Geo <- AMRDiversityViz_Geo %>% filter(!is.na(MMRC.score))
filtered_samples <- AMRDiversityViz_Geo[, 1]  # Assuming first column is SampleID
sample_ids_filtered <- as.character(filtered_samples[[1]]) #Extract Sample IDs as a vector
common_samples <- intersect(sample_ids_filtered, rownames(AMR_diversity))#If row names of AMR_diversity are Sample IDs, then proceed with intersection
AMR_diversity_filtered <- AMR_diversity[rownames(AMR_diversity) %in% common_samples, ] #Filter AMR_diversity to keep only rows with common Sample IDs
AMRDiversityViz_Geo$other.org<-ifelse(AMRDiversityViz_Geo$Other.organisms.isolated.in.sputum != "1" & AMRDiversityViz_Geo$Other.organisms.isolated.in.sputum != "0", "1", AMRDiversityViz_Geo$Other.organisms.isolated.in.sputum)
adonis2(AMR_diversity_filtered ~ Country + BMI + Aetiology_short+MMRC.score+Number.of.lobes.affected+PriorHospitalisations+other.org+ICS.use+Long.term.antibiotics, data=AMRDiversityViz_Geo, method="bray", permutations=999)
adonis2(AMR_diversity_filtered ~ SC_AMR_alt +Country + BMI + Aetiology_short+MMRC.score+Number.of.lobes.affected+PriorHospitalisations+other.org+ICS.use+Long.term.antibiotics, data=AMRDiversityViz_Geo, method="bray", permutations=999)
#INVESTIGATE COLINEARITY
#Create a contingency table for
mytable <- table(AMRDiversityViz_Geo$Aetiology_short, AMRDiversityViz_Geo$Country)
mytable
#Compute  Cramer's V statistic
assocstats(mytable)
#Compute  Cramer's V statistic
assocstats(mytable)
knitr::opts_chunk$set(echo = TRUE)
### PCA ####
AMRLT_diversity <- MasterLT[which(MasterLT$TypeSamplesA !="NA"),] %>%
as_tibble() %>%
select(-14:-230)
#AMRLT_diversity <- select(MasterLT[which(MasterLT$TypeSamplesA !="NA"),], -2:-79, -231:-3621) #ugly 'which subsetting to drop controls #gene
AMRLT_diversity <- select(MasterLT[which(MasterLT$TypeSamplesA !="NA"),], -2:-230) #ugly 'which subsetting to drop controls #class
NAMES_list <- head(MasterLT$SampleSeqNo, -6) #head is just to drop controls again n=6
main_dataLT <- AMRLT_diversity[AMRLT_diversity$SampleSeqNo %in% NAMES_list, ]
AMRLT_diversity<-as.matrix(AMRLT_diversity)
rownames(AMRLT_diversity) <- AMRLT_diversity[,1]
AMRLT_diversity = as.data.frame(subset(AMRLT_diversity, select = -c(SampleSeqNo) ))
AMRLT_diversity[] <- lapply(AMRLT_diversity, as.numeric)
isZero <- base::rowSums(AMRLT_diversity) == 0
AMRLT_diversity<-AMRLT_diversity[!isZero,]
vegdist(AMRLT_diversity, "bray")-> Mbiome_PCoA
as.matrix(Mbiome_PCoA)->Mbiome_PCoA
BrayCurtMbiome=cmdscale(Mbiome_PCoA)
#ordiplot (BrayCurtMbiome, display = 'species', type = 'text')
BCords<-scores(BrayCurtMbiome)
BCords<-(as.data.frame(t(BCords)))
BCords<-as.data.frame(t(BCords))
LTDiversityViz<-MasterLT[which(MasterLT$TypeSamplesA !="NA"),] #drop controls -which subsetting
#LTDiversityViz$SampleSeqNo %in% row.names(BCords)
LTDiversityViz<-LTDiversityViz[ LTDiversityViz$SampleSeqNo %in% row.names(BCords) , ]
LTDiversityViz$Dim1<-BCords$Dim1
LTDiversityViz$Dim2<-BCords$Dim2
LTDiversityViz$FEV170<-ifelse(LTDiversityViz$FEV1 >70, ">70", "<70")
LTDiversityViz$FEV170<- factor(LTDiversityViz$FEV170 , levels = c(">70","<70"))
#AMR PCOA of Resistotypes BY sample type
gg <- data.frame(cluster=factor(LTDiversityViz$TypeSamplesB), x=LTDiversityViz$Dim1, y=LTDiversityViz$Dim2, grp=LTDiversityViz$TypeSamplesB, shape=LTDiversityViz$TypeSamplesB)
# calculate group centroid locations
centroids <- aggregate(cbind(x,y)~cluster,data=gg,mean)
# merge centroid locations into ggplot dataframe
gg <- merge(gg,centroids,by="cluster",suffixes=c("",".centroid"))
# generate star plot...
E<-ggplot(gg) +
#scale_col_manual(values=c(16, 16, 16,16))+
scale_linetype_identity() +
geom_segment(aes(x=x.centroid, y=y.centroid, xend=x, yend=y, colour = cluster),alpha = 0.3)+
geom_point(aes(x=x,y=y, colour = cluster), size = 2) + #can add ",shape = shape" in aes to introduce shape to points.
#geom_point(aes(x=x,y=y, colour = cluster, shape = shape), size = 2) +
geom_point(data=centroids, aes(x=x, y=y, color=cluster), size=5) +
geom_point(data=centroids, aes(x=x, y=y, color=cluster), size=5, shape = 13, colour = "black") +
scale_shape_discrete(labels = c("B", "E", "P"))+
scale_colour_manual(values = c("#619CFF", "#F8766D", "#00BA38"), labels = c("B", "E", "P"))+
labs(colour="",
x = "PC 1 (83.3%)", y = "PC 2 (12.1%)")+
theme(legend.position="bottom",
legend.title = element_blank(),
axis.line = element_line(size = 0.5, colour = "black"),
panel.background = element_rect(fill = NA),
)+  scale_x_reverse()
#+ggtitle("Timepoint")
#PERMANOVA - timepoint
adonis2(AMRLT_diversity~TypeSamplesB , data = LTDiversityViz, method = "bray",permutations=999, strata = LTDiversityViz$SputumSampleNo)
#checking PC %s
#rda(X = AMRLT_diversity, scale = TRUE)
checkEig<-capscale(AMRLT_diversity ~1)
Eig <-eigenvals(checkEig)
print(Eig[1:2] / sum(Eig))
E
#Exclude samples with 'EX' in TypeSamplesB so as to compare pre post ACUTE therapy
filtered_data <- LTDiversityViz[LTDiversityViz$TypeSamplesB != 'EX', ]
# Assuming AMRLT_diversity is your dataset with values
# Match the rows based on SampleSeqNo
amr_diversity <- AMRLT_diversity[rownames(AMRLT_diversity) %in% filtered_data$SampleSeqNo, ]
# Run PERMANOVA with strata information
result <- adonis2(amr_diversity ~ TmToNxtEx, data = filtered_data, method = "bray",
permutations = 999)
# Print the result
print(result)
amr_diversity
kruskal.test(filtered_data$MLS,filtered_data$TmToNxtEx)
plot(filtered_data$MLS,filtered_data$TmToNxtEx)
filtered_data$MLS
filtered_data$TmToNxtEx
wilcox.test(filtered_data$MLS,filtered_data$TmToNxtEx)
wilcox.test(filtered_data$TmToNxtEx, filtered_data$MLS)
class(filtered_data$MLS)
wilcox.test(filtered_data$MLS~filtered_data$TmToNxtEx,)
plot(filtered_data$MLS~filtered_data$TmToNxtEx,)
ggplot(aes(data = filtered_data, MLS,TmToNxtEx, group = TmToNxtEx))+
geom_boxplot()
ggplot(data = filtered_data, aes(MLS,TmToNxtEx, group = TmToNxtEx))+
geom_box
ggplot(data = filtered_data, aes(MLS,TmToNxtEx, group = TmToNxtEx))+
geom_boxplot()
ggplot(data = filtered_data, aes(MLS,TmToNxtEx, group = TmToNxtEx))+
geom_boxplot()+geom_jitter()
#Exclude samples with 'EX' in TypeSamplesB so as to compare pre post ACUTE therapy
filtered_data <- LTDiversityViz[LTDiversityViz$TypeSamplesB != 'E', ]
# Assuming AMRLT_diversity is your dataset with values
# Match the rows based on SampleSeqNo
amr_diversity <- AMRLT_diversity[rownames(AMRLT_diversity) %in% filtered_data$SampleSeqNo, ]
# Run PERMANOVA with strata information
result <- adonis2(amr_diversity ~ TmToNxtEx, data = filtered_data, method = "bray",
permutations = 999)
# Print the result
print(result)
ggplot(data = filtered_data, aes(MLS,TmToNxtEx, group = TmToNxtEx))+
geom_boxplot()+geom_jitter()
ggplot(data = filtered_data, aes(TmToNxtEx,MLS, group = TmToNxtEx))+
geom_boxplot()+geom_jitter()
wilcox.test(filtered_data$TmToNxtEx,filtered_data$MLS )
wilcox.test(filtered_data$TmToNxtEx~filtered_data$MLS )
wilcox.test(filtered_data$MLS , filtered_data$TmToNxtEx)
wilcox.test(as.numeric(filtered_data$MLS), filtered_data$TmToNxtEx)
wilcox.test(as.numeric(filtered_data$MLS)~filtered_data$TmToNxtEx)
wilcox.test(as.numeric(filtered_data$MLS), as.numeric(filtered_data$TmToNxtEx), paired = TRUE)
wilcox.test(as.numeric(filtered_data$MLS), filtered_data$TmToNxtEx, paired = TRUE)
